#!/bin/bash

PARTITION=$1
PASSPHRASE=$2
COMMANDS=$3
TARGET='/target'

if [ -z ${PARTITION} ] || [ ! -e ${PARTITION} ]; then
  echo "An existing OS partition path or directory is needed"
  echo "E.g.: $0 /dev/sda1"
  echo "or: $0 /path/to/systemdir"
  echo
  echo "If the partition is a LUKS encrypted partition:"
  echo "chroot-partition /dev/sda1 my_passphrase"
  echo
  echo "You can run a command:"
  echo "chroot-partition /dev/sda1 \"\" \"command 1;command 2\""
  echo "chroot-partition /dev/sda1 my_passphrase \"command 1;command 2\""
  echo
  echo "Tip: list all partitions with: sudo fdisk -l"
  exit 0
fi

# Be root to run this script
if [ $UID -ne 0 ]; then
  sudo $0 "$@"
  exit 0
fi

# Check if partition is already mounted and use that as the target
if [ "${PARTITION:0:4}" == '/dev' ]; then
    # Map luks encrypted partition
    FS=$(blkid -s TYPE -o value ${PARTITION})
    if [ "$FS" == 'crypto_LUKS' ]; then
        echo "Map encrypted partition ${PARTITION}"
        PNAME=$(basename ${PARTITION})
        if [ ! -z ${PASSPHRASE} ]; then
            printf "${PASSPHRASE}" | cryptsetup open --type luks ${PARTITION} ${PNAME}
        else
            cryptsetup open --type luks ${PARTITION} ${PNAME}
        fi
        if [ ! -e "/dev/mapper/${PNAME}" ]; then
            echo "Unable to map encrypted partition ${PARTITION} - exiting"
            exit
        fi
        PARTITION="/dev/mapper/${PNAME}"
    fi

    MOUNTCHK=$(grep "${PARTITION} " /proc/mounts | awk '{print $2}')
    if [ "${MOUNTCHK}" != "" ]; then
        TARGET=${MOUNTCHK}
    fi
    
    # Check if target is used as mount point by anything other than partition
    MOUNTCHK=$(grep " ${TARGET} " /proc/mounts | grep -v "${PARTITION}")
    if [ ! -z ${MOUNTCHK} ]; then
        echo "${TARGET} in use - exiting"
        exit 1
    fi
    
    # Create temporary dir
    if [ ! -d ${TARGET} ]; then
        mkdir -v ${TARGET}
    fi
    
    # Mounting
    mount -v ${PARTITION} ${TARGET}
else
    # No partition but directory is provided
    TARGET=${PARTITION}
fi

if ! $(ls ${TARGET}{/run,/sys,/proc,/dev} >/dev/null 2>&1); then
    echo "Missing ${TARGET}/{dev,proc,sys,run} - exiting"
    if [ ${TARGET} == "/target" ]; then
        umount -v ${TARGET}
        rmdir -v ${TARGET}
    fi
    exit 2
fi

# Bind directories
mount -vt devtmpfs devtmpfs ${TARGET}/dev
mount -vt devpts devpts ${TARGET}/dev/pts
mount -vt proc proc ${TARGET}/proc
mount -vt sysfs sysfs ${TARGET}/sys
mount -vt tmpfs tmpfs ${TARGET}/run
if [ -d /sys/firmware/efi/efivars ] && 
   [ -d ${TARGET}/sys/firmware/efi/efivars ]; then
    mount -vt efivarfs efivarfs ${TARGET}/sys/firmware/efi/efivars
fi
if [ -h ${TARGET}/dev/shm ]; then mkdir -pv ${TARGET}/$(readlink ${TARGET}/dev/shm); fi
if [ -h ${TARGET}/var/lock ]; then mkdir -pv ${TARGET}/$(readlink ${TARGET}/var/lock); fi

# Mount all partitions in the chrooted fstab
chroot ${TARGET}/ /bin/bash -c "mount -av 2>/dev/null"

# Chroot into dir
echo "Chrooting into ${TARGET}..."
if [ ! -z ${COMMANDS} ]; then COMMANDS="-c \"${COMMANDS}\""; fi

eval "chroot \"${TARGET}\" /usr/bin/env -i \
    HOME=/root \
    TERM=\"$TERM\" \
    PS1='(chroot) \u:\w\\$ ' \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin \
    /bin/bash --login +h \
    ${COMMANDS}"

# Unmount when done
umount -v ${TARGET}/{run,sys/firmware/efi/efivars,sys,proc,dev/pts,dev}
grep ${TARGET} /proc/mounts | grep ^/dev | grep -v "${PARTITION}" | awk '{print $1}' | xargs umount -v 2>/dev/null

if [ ${TARGET} == "/target" ]; then
    umount -lfv ${TARGET}
    rmdir -v ${TARGET} 2>/dev/null
fi
